services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vehicle-management-db
    environment:
      POSTGRES_DB: vehicle_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - vehicle-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d vehicle_management"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Backend Spring Boot Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vehicle-management-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/vehicle_management
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      SPRING_FLYWAY_ENABLED: true
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: true
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - vehicle-network
    volumes:
      - backend_uploads:/app/uploads
      - backend_temp:/app/temp
      - backend_csv:/app/csv
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Frontend Next.js Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: vehicle-management-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8080/api
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - vehicle-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local
  backend_temp:
    driver: local
  backend_csv:
    driver: local

networks:
  vehicle-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
