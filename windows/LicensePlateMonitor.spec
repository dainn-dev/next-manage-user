# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['run_monitor.py'],
    pathex=['.'],
    binaries=[],
    datas=[
        ('config.json', '.'),
        ('license_plates.json', '.'),
        ('model', 'model'),
        ('function', 'function'),
        ('result', 'result'),
        ('test_image', 'test_image'),
    ],
    hiddenimports=[
        'PyQt5.QtCore',
        'PyQt5.QtGui', 
        'PyQt5.QtWidgets',
        'cv2',
        'torch',
        'torchvision',
        'ultralytics',
        'numpy',
        'PIL',
        'requests',
        'pyttsx3',
        'gtts',
        'matplotlib',
        'pandas',
        'seaborn',
        'scipy',
        'pygame',
        'function.helper',
        'function.utils_rotate',
        'function.json_handler',
        'config_manager',
        'config_dialog',
        'tts_manager',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='LicensePlateMonitor',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='icon.ico' if os.path.exists('icon.ico') else None,
)
